// Generated by  on 2015-01-27 오후 5:15:30
define(
    [
        'bx/common/config'
        , 'bx/common/common-info'
        , 'bx-component/message/message-alert'
        , 'bx-component/message/message-confirm'
        , 'bx-component/ext-grid/_ext-grid'
        , 'text!app/views/page/PWF/504/PWF504-list-tpl.html'
        , 'app/views/page/popup/CAPCM/popup-message'
    ],
    function (config,
              commonInfo,
              alertMessage,
              confirmMessage,
              ExtGrid,
              tpl
        , PopupMessage) {
        // 전역변수 선언


    	var comboAprvlStsCd = {}; // 승인상태코드


        var PWFTabView = Backbone.View.extend({


            // 태그이름 설정
            tagName: 'section',


            // 클래스 이름 설정
            className: 'PST001-list-page',


            // 템플릿 설정
            templates: {
                'tpl': tpl
            }


            // 이벤트 설정
            , events: {
                'click.bx-tab-container .bx-tab-menu-item': 'changeTab'
            }


            // 탭에 따라 호출될 메소드 지정
            , subPageRenderMap: {
                'PWF504-single-tab': 'selSingle'
            }


            , initialize: function (initData) {
                var that = this;


                $.extend(that, initData);


                // 페이지 템플릿 설정
                that.$el.html(that.tpl());


                // 콤보조회 서비스호출 준비
                var sParam = {};


                // 컴포넌트
                sParam = {};
                sParam.cdNbr = "A0452";
                var linkData1 = {"header": fn_getHeader("CAPCM0038400"), "CaCmnCdSvcGetCdListByCdNbrIn": sParam};


                /* ========================================================== */
                bxProxy.all([
                    /* ========================================================== */
                    // 컴포넌트콤보로딩
                    {
                        url: sUrl, param: JSON.stringify(linkData1), success: function (responseData) {
	                        if (!responseData.header.errorMessageProcessed) {
	                            comboAprvlStsCd = new Ext.data.Store({
	                                fields: ['cd', 'cdNm'],
	                                data: responseData.CaCmnCdSvcGetCdListByCdNbrOut.tbl
	                            });
	                        }
                        }
                    }
                ], {
                    success: function () {


                        /* ========================================================== */
                        /*  Grid Define   */
                        /* ========================================================== */
                        that.SingleGrid = new ExtGrid({
                            //  그리드 컬럼 정의
                            fields: ['No'
                                     , 'instCd'
                                     , 'aprvlId'
                                     , 'aprvlTrgtSrvcCd'
                                     , 'aprvlTmpltId'
                                     , 'aprvlTmpltNm'
                                     , 'aprvlTrgtBizIdCntnt'
                                     , 'aprvlDemandStaffId'
                                     , 'aprvlDemandStaffNm'
                                     , 'aprvlStsCd'
                                     , 'aprvlAplctnDt'
                                     , 'aprvlAplctnCntnt'
                                     , 'aprvlTpCd'
                                     , 'aprvlPtrnDscd'
                                     , 'lastAprvlDt'
                                     , 'seqNbr'
                            ]
                            , id: 'SingleGrid'
                            , columns: [
                                {
                                    text: bxMsg('cbb_items.SCRNITM#No')
                                    , dataIndex: 'rowIndex',
                                    style: 'text-align:center',
                                    align: 'right'
                                    , sortable: false
                                    , width: 30
                                    // other config you need..
                                    , renderer: function (value, metaData, record, rowIndex, colIndex, store) {
                                    	return rowIndex + 1;
                                    }
                                }
                                , {
        		                    text: bxMsg('cbb_items.AT#aprvlId'),
        		                    dataIndex: 'aprvlId',
        		                    width: 120,
        		                    style: 'text-align:center',
       		                    	align: 'center'
                                }
                                , {
        		                    text: bxMsg('cbb_items.AT#aprvlTmpltNm'),
        		                    dataIndex: 'aprvlTmpltNm',
        		                    width: 200,
        		                    style: 'text-align:left',
        		                    align: 'left'
                                }
                                , {
        		                    text: bxMsg('cbb_items.AT#aprvlDemandStaffId'),
        		                    dataIndex: 'aprvlDemandStaffId',
        		                    width: 140,
        		                    style: 'text-align:center',
        		                    align: 'center'
                                }
                                , {
                                    text: bxMsg('cbb_items.AT#aprvlDemandStaffNm'),
                                    dataIndex: 'aprvlDemandStaffNm',
                                    width: 140,
                                    style: 'text-align:center',
                                    align: 'center'
                                }
                                , {
                                    text: bxMsg('cbb_items.AT#aprvlDemandDt'),
                                    dataIndex: 'aprvlAplctnDt',
                                    width: 120,
                                    style: 'text-align:center',
                                    align: 'center',
                                    renderer: function (val) {
                                        return that.setGridDate(val);
                                    }
                                }
                                , {
                                    text: bxMsg('cbb_items.AT#exctnDt'),
                                    dataIndex: 'lastAprvlDt',
                                    width: 120,
                                    style: 'text-align:center',
                                    align: 'center',
                                    renderer: function (val) {
                                        return that.setGridDate(val);
                                    }
                                }


                                , {
                                    text: bxMsg('cbb_items.AT#stsNm'),
                                    width: 120,
                                    dataIndex: 'aprvlStsCd', style: 'text-align:center', align: 'center'
                                    , editor: {
                                        xtype: 'combobox'
                                        , store: comboAprvlStsCd
                                        , displayField: 'cdNm'
                                        , valueField: 'cd'
                                    }
                                    ,
                                    renderer: function (val) {
                                        index = comboAprvlStsCd.findExact('cd', val);
                                        if (index != -1) {
                                            rs = comboAprvlStsCd.getAt(index).data;
                                            return rs.cdNm;
                                        }
                                    } // end of render
                                }
                            ] // end of columns


                            // 컴포넌트 그리드('libs/bx/bx-ui/component/ext-grid/_ext-grid.js' 참조) 에서 정의한 것 외에 추가할 경우 gridConfig에 추가
                            , gridConfig: {
//                                // 셀 에디팅 플러그인
//                                // 2번 클릭시, 에디팅할 수 있도록 처리
//                                plugins: [
//                                    Ext.create('Ext.grid.plugin.CellEditing', {
//                                        clicksToEdit: 2
//                                        , listeners: {
//                                            'beforeedit': function (editor, e) {
//                                                if (e.field == 'exctnDt' || e.field == 'crtnDt') {
//                                                    return false;
//                                                }
//                                            }
//                                        }
//                                    }) // end of Ext.create
//                                ] // end of plugins
                            } // end of gridConfig
                            , listeners: {
                            	celldblclick: function (view, cell, cellIndex, record, row, rowIndex, e) {


                            		if(that.isRqerBase){ //승인 요청자 기준
                            			that.selectReocrd4DemandUi();
                            		}
                            		else{ //승인자 기준
                            			that.selectReocrd();
                            		}
                                }
                            }
                        });
                        // 그리드 렌더
                        that.createGrid("single");


                    } // end of success:.function
                }); // end of bxProxy.all






            } // end of initialize:


            // 첫번째 탭 활성화 설정
            , render: function () {
                this.currentSubTab = 'PWF504-single-tab';
                return this.$el;
            }


            // 그리드 생성
            , createGrid: function (target) {
                if (target == "single") {
                    this.$el.find(".PWF504-single-grid").html(this.SingleGrid.render({'height': 300}));
                }
            } // end of createGrid


            // 탭 변경 이벤트 처리
            , changeTab: function (e) {
                var $clickedTab = $(e.currentTarget),
                    pageLink = $clickedTab.attr('data-link'),
                    $tabs = $clickedTab.siblings('.bx-tab-menu-item'),
                    $pages = $clickedTab.parents('.bx-tab-menu').next().find('.bx-tab-page');


                // 활성화 되어있는 탭과 페이지 비활성화 처리
                $tabs.filter('.is-active').removeClass('is-active');
                $pages.filter('.is-active').removeClass('is-active');


                // 클릭된 탭과 페이지 활성화 처리
                $clickedTab.addClass('is-active');
                $pages.filter('[data-link="' + pageLink + '"]').addClass('is-active');


                // 현재 활성화 탭 설정
                this.currentSubTab = pageLink;
                $pages.filter('[data-link="' + pageLink + '"]').show();


                this.renderSubPage();
            }


            // 텝에 연결된 매소드 호출
            , renderSubPage: function (param) {
                var subPageRenderName = this.subPageRenderMap[this.currentSubTab];
                //info 에서 넘어온 파라미터를 전역변수에 현재 창의 전역변후에 넣는다.
                this.settedParam = param;


                if(param.aprvlStsCd == null){ //승인자 기준
                	this.isRqerBase = false;
                }else{ //승인 요청자 기준
                	this.isRqerBase = true;
                }


                (typeof this[subPageRenderName] === 'function') && this[subPageRenderName]();
            }


            // 그리드의 날짜컬럼의 포맷변경 yyyymmdd ==> yyyy-mm-dd
            , setGridDate: function (val) {
                var returnVal = "";


                if (val == null || val.length != 8) {
                    return null;
                }


                returnVal = val.substring(0, 4) + "-" + val.substring(4, 6) + "-" + val.substring(6, 8);


                return returnVal;
            }


            // 그리드의 날짜컬럼의 포맷 변경 yyyy-mm-dd ==> yyyymmdd
            , getGridDate: function (val) {
                var returnVal = "";
                returnVal = val.replace(/-/gi, '');


                return returnVal;
            }


            /* ============================================================== */
            /*  Single 조회         */
            /* ============================================================== */
            , selSingle: function () {
                var that = this;
                var sParam = that.settedParam;


                var linkData = {"header": fn_getHeader("PWF5048401"), "ToDoListInqrySvcGetToDoListNonActivitiIn": sParam};


                //ajax 호출
                bxProxy.post(sUrl, JSON.stringify(linkData), {
                    //	loading 설정
                    enableLoading: true,
                    success: function (responseData) {
                        if (fn_commonChekResult(responseData)) {
                            var taskList = responseData.ToDoListInqrySvcGetToDoListNonActivitiOut.taskList;


                            if (taskList != null || taskList.length > 0) {
                                if (sParam.pageNum == 1) {
                                    // 조회
                                    that.SingleGrid.setData(taskList);
                                } else {
                                    //다음
                                    var taskLists = that.SingleGrid.getAllData().concat(taskList);
                                    that.SingleGrid.setData(taskLists);
                                }
                            } else {
                                that.SingleGrid.resetData();
                            }


                            if (taskList == null || taskList.length == 0) {
                                if (sParam.pageNum > 1) {
                                    alertMessage.error(bxMsg('cbb_err_msg.AUICME0032'));
                                }
                            }
                        }
                    }
                });
            } // end of 조회


            //그리드 더블클릭시 이벤트 처리
            // 승인자일시 승인실행 페이지로 이동
            , selectReocrd: function () {
                var that = this;
                var selectedRecord = that.SingleGrid.grid.getSelectionModel().selected.items[0];
                var param = {};
                var pageHandler = "PWF505";


                if (!selectedRecord || !pageHandler || pageHandler == 'N/A') {
                    return;
                } else {
                    that.$el.trigger({
                        type: 'open-conts-page',
                        pageHandler: pageHandler,
                        pageDPName: bxMsg('cbb_items.SCRN#' + pageHandler),
                        pageInitialize: true,


                        pageRenderInfo: {
                        	aprvlId: selectedRecord.data.aprvlId
                        	, seqNbr: selectedRecord.data.seqNbr
                        }
                    });
                }
            }


            //그리드 더블클릭시 이벤트 처리(요청 화면으로 이동)
            // 요청자일시 요청 화면으로 이동
            , selectReocrd4DemandUi: function () {
                var that = this;
                var selectedRecord = that.SingleGrid.grid.getSelectionModel().selected.items[0];
                var param = {};


                // 요청상태코드가 거절이면 화면을 안보여 준다.
                if(selectedRecord.data.aprvlStsCd == "02") {
                	return;
                }
                var pageNbr = "";


                var inputData = JSON.parse(selectedRecord.data.aprvlTrgtBizIdCntnt);


                if(inputData == null) {
                	pageNbr = selectedRecord.data.aprvlTrgtSrvcCd.substring(0, 6);
                }
                else {
                	if(inputData.scrnId) {
                		pageNbr = inputData.scrnId;
                	}
                }


//                pageNbr = selectedRecord.data.aprvlTrgtSrvcCd.substring(0, 6);


                if(pageNbr.substring(0, 1) == 'P'){
                	pageNbr = "S"+pageNbr.substring(1);
                }


                var pageHandler = pageNbr;


                if (!selectedRecord || !pageHandler || pageHandler == 'N/A') {
                    return;
                } else {
                    that.$el.trigger({
                        type: 'open-conts-page',
                        pageHandler: pageHandler,
                        pageDPName: bxMsg('cbb_items.SCRN#' + pageHandler),
                        pageInitialize: true,


                        pageRenderInfo: {
                        	aprvlId: selectedRecord.data.aprvlId
                        }
                    });
                }
            }


            // ToDo 화면에서 자체 완료 처리
            , completeTask: function (param) {
                var that = this;
                var sParam = {};
                var instCd = fn_getInstCd(commonInfo.getInstInfo().instCd);


           	 	if (instCd == null) {
                   alertMessage.info(bxMsg('cbb_items.SCRNITM#instSearchMsg'));
                   return;
           	 	}


                // 입력항목 set
                sParam.instCd = instCd;
                sParam.taskId = param.data.taskId;
                sParam.wflowInstncId = param.data.wflowInstncId;
                sParam.wflowIdKey = param.data.wflowIdKey;
                sParam.aprvlDemandStaffId = $.sessionStorage('staffId');
                sParam.aprvlOpnn = 'N/A';
                sParam.wflowAprvlDscd = '01'; // 승인


                // 헤더 조립
                var linkData = {"header": fn_getHeader("PWF0308101"), "ToDoMgmtSvcExecuteTodoMgmtListIn ": sParam};


                // ajax 호출
                bxProxy.post(sUrl, JSON.stringify(linkData), {
                    success: function (responseData) {
                    	if(fn_commonChekResult(responseData)) {
                    		alertMessage.info(bxMsg('cbb_items.SCRNITM#success'));


                            // 재조회
                            that.selSingle();
                           }
                    }	// end of success: function
                });	// end of bxProxy
            }


            , viewProcessInstanceDetail: function () {
                var that = this;


                var selectedRecord = that.SingleGrid.grid.getSelectionModel().selected.items[0];


                if (selectedRecord.data) {
                    var param = {};
                    param.instCd = selectedRecord.data.instCd;
                    param.wflowId = selectedRecord.data.wflowId;
                    param.wflowInstncId = selectedRecord.data.wflowInstncId,
                    param.wflowNm = selectedRecord.data.wflowNm,
                    param.aprvlAplctnCntnt = selectedRecord.data.aprvlAplctnCntnt,
                    param.wflowPrgrsStsCd = selectedRecord.data.wflowPrgrsStsCd;


                    that.trigger('loadProcessInstanceData', param);
                }
            }


            , reset: function () {
                var that = this;


                that.SingleGrid.resetData();
            }


        }); // end of PWFTabView = Backbone.View.extend


        return PWFTabView;
    }  // end of main function
);
