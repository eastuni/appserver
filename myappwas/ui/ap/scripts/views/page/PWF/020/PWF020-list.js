// Generated by  on 2015-01-27 오후 5:15:30
define(
    [
        'bx/common/config'
        , 'bx/common/common-info'
        , 'bx-component/message/message-alert'
        , 'bx-component/message/message-confirm'
        , 'bx-component/ext-grid/_ext-grid'
        , 'text!app/views/page/PWF/020/PWF020-list-tpl.html'
        , 'app/views/page/popup/CAPCM/popup-message'
    ],
    function (config,
              commonInfo,
              alertMessage,
              confirmMessage,
              ExtGrid,
              tpl
        , PopupMessage) {
        // 전역변수 선언


        var PWFTabView = Backbone.View.extend({


            // 태그이름 설정
            tagName: 'section',


            // 클래스 이름 설정
            className: 'PST001-list-page',


            // 템플릿 설정
            templates: {
                'tpl': tpl
            }


            // 이벤트 설정
            , events: {
                'click.bx-tab-container .bx-tab-menu-item': 'changeTab'
            }


            // 탭에 따라 호출될 메소드 지정
            , subPageRenderMap: {
                'PWF020-single-tab': 'selSingle'
            }


            , initialize: function (initData) {
                var that = this;


                $.extend(that, initData);


                // 페이지 템플릿 설정
                that.$el.html(that.tpl());


                /* ========================================================== */
                /*  Grid Define   */
                /* ========================================================== */
                that.SingleGrid = new ExtGrid({
                    //  그리드 컬럼 정의
                    fields: ['No', 'instCd', 'wflowNm', 'taskKey', 'taskNm', 'taskId', 'exctnStaffId', 'exctnStaffNm'
                        , 'aprvlDemandStaffId', 'aprvlDemandStaffNm', 'crtnDt', 'exctnDt', 'aprvlAplctnCntnt', 'wflowTpCd'
                        , 'custId', 'custNm', 'pdCd', 'pdNm', 'acctNbr', 'wflowId', 'wflowIdKey', 'wflowInstncId', 'pgHandler', 'aplctnNbr', 'wflowPrgrsStsCd', 'arrId'
                    ]
                    , id: 'SingleGrid'
                    , columns: [
                        {
                            text: bxMsg('cbb_items.SCRNITM#No')
                            , dataIndex: 'rowIndex',
                            style: 'text-align:center',
                            align: 'right'
                            , sortable: false
                            , width: 30
                            // other config you need..
                            , renderer: function (value, metaData, record, rowIndex, colIndex, store) {
                            	return rowIndex + 1;
                            }
                        }
                        , {text: bxMsg('cbb_items.AT#instCd'), dataIndex: 'instCd', width: 0, style: 'text-align:center'}
                        , {
                            text: bxMsg('cbb_items.AT#wflowNm'),
                            dataIndex: 'wflowNm',
                            width: 100,
                            style: 'text-align:center'
                        }
                        , {text: bxMsg('cbb_items.AT#wflowId'), dataIndex: 'wflowId', width: 0, style: 'text-align:center'}
                        , {text: bxMsg('cbb_items.AT#taskId'), dataIndex: 'taskId', width: 60, style: 'text-align:center'}
                        , {text: bxMsg('cbb_items.AT#taskNm'), dataIndex: 'taskNm', width: 180, style: 'text-align:center'}
                        , {
                            text: bxMsg('cbb_items.AT#exctnStaffNm'),
                            dataIndex: 'exctnStaffNm',
                            width: 0,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#aprvlDemandStaffNm'),
                            dataIndex: 'aprvlDemandStaffNm',
                            width: 120,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#crtnDt'),
                            dataIndex: 'crtnDt',
                            width: 80,
                            style: 'text-align:center',
                            align: 'center',
                            renderer: function (val) {
                                return that.setGridDate(val);
                            }
                        }
                        , {
                            text: bxMsg('cbb_items.AT#exctnDt'),
                            dataIndex: 'exctnDt',
                            width: 80,
                            style: 'text-align:center',
                            align: 'center',
                            renderer: function (val) {
                                return that.setGridDate(val);
                            }
                        }
                        , {text: bxMsg('cbb_items.AT#custNm'), dataIndex: 'custNm', width: 100, style: 'text-align:center'}
                        , {text: bxMsg('cbb_items.AT#pdNm'), dataIndex: 'pdNm', width: 150, style: 'text-align:center'}
                        , {
                            text: bxMsg('cbb_items.AT#stsNm'),
                            tdCls: 'x-grid-cell-topic',
                            style: 'text-align:center',
                            renderer: function (value, p, record, idx) {
                                var button;
                                /**
                                 * 버튼 렌더링 조건(유형은 공지이고 미완료 상태)
                                 */
                                if (record.get('wflowTpCd') == '03' && fn_isEmpty(record.get('exctnDt'))) {
//                                    button = '<div class="grid-cell-btn label-btn" data-link="case">' + bxMsg('cbb_items.AT#cmplt') + '</div>';
                                    button = '<div class="grid-cell-btn label-btn" data-link="case">' + bxMsg('cbb_items.ABRVTN#cmplt') + '</div>';
                                } else {
                                    button = "";
                                }
                                return button;
                            },
                            sortable: false,
                            align: 'center',
                            width: 90,
                            listeners: {
                                /**
                                 * 버튼 클릭 이벤트 등록
                                 */
                                click: function (grid, rowEl, rowIdx, cellIdx, e, record) {
                                    if ($(e.target).hasClass('label-btn')) {
                                        that.completeTask(record);
                                    }
                                }
                            }
                        }                        
                        , {
                            text: bxMsg('cbb_items.AT#acctNbr'),
                            dataIndex: 'acctNbr',
                            width: 150,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#exctnStaffId'),
                            dataIndex: 'exctnStaffId',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#taskKey'),
                            dataIndex: 'taskKey',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#aprvlDemandStaffId'),
                            dataIndex: 'aprvlDemandStaffId',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#custId'),
                            dataIndex: 'custId',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#pdCd'),
                            dataIndex: 'pdCd',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#wflowInstncId'),
                            dataIndex: 'wflowInstncId',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#pgHandler'),
                            dataIndex: 'pgHandler',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#aplctnNbr'),
                            dataIndex: 'aplctnNbr',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#aprvlAplctnCntnt'),
                            dataIndex: 'aprvlAplctnCntnt',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#wflowPrgrsStsCd'),
                            dataIndex: 'wflowPrgrsStsCd',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                        , {
                            text: bxMsg('cbb_items.AT#arrId'),
                            dataIndex: 'arrId',
                            width: 0,
                            hidden: true,
                            style: 'text-align:center'
                        }
                    ] // end of columns


                    // 컴포넌트 그리드('libs/bx/bx-ui/component/ext-grid/_ext-grid.js' 참조) 에서 정의한 것 외에 추가할 경우 gridConfig에 추가
                    , gridConfig: {
                        // 셀 에디팅 플러그인
                        // 2번 클릭시, 에디팅할 수 있도록 처리
                        plugins: [
                            Ext.create('Ext.grid.plugin.CellEditing', {
                                clicksToEdit: 2
                                , listeners: {
                                    'beforeedit': function (editor, e) {
                                        if (e.field == 'exctnDt' || e.field == 'crtnDt') {
                                            return false;
                                        }
                                    }
                                }
                            }) // end of Ext.create
                        ] // end of plugins
                    } // end of gridConfig
                    , listeners: {
                        dblclick: {
                            element: 'body',
                            fn: function () {
                                that.selectReocrd();
                            }
                        }
                        /*
                         ,click: {
                         element: 'body',
                         fn: function() {
                         console.log('click event caught.');
                         that.viewProcessInstanceDetail();
                         }
                         }
                         */
                        , cellclick: function (view, cell, cellIndex, record, row, rowIndex, e) {
                            if (cellIndex <= 2) {
                                that.viewProcessInstanceDetail();
                            }
                        }
                    }
                });
                // 그리드 렌더
                that.createGrid("single");


            } // end of initialize:


            // 첫번째 탭 활성화 설정
            , render: function () {
                this.currentSubTab = 'PWF020-single-tab';
                return this.$el;
            }


            // 그리드 생성
            , createGrid: function (target) {
                if (target == "single") {
                    this.$el.find(".PWF020-single-grid").html(this.SingleGrid.render({'height': 300}));
                }
            } // end of createGrid


            // 탭 변경 이벤트 처리
            , changeTab: function (e) {
                var $clickedTab = $(e.currentTarget),
                    pageLink = $clickedTab.attr('data-link'),
                    $tabs = $clickedTab.siblings('.bx-tab-menu-item'),
                    $pages = $clickedTab.parents('.bx-tab-menu').next().find('.bx-tab-page');


                // 활성화 되어있는 탭과 페이지 비활성화 처리
                $tabs.filter('.is-active').removeClass('is-active');
                $pages.filter('.is-active').removeClass('is-active');


                // 클릭된 탭과 페이지 활성화 처리
                $clickedTab.addClass('is-active');
                $pages.filter('[data-link="' + pageLink + '"]').addClass('is-active');


                // 현재 활성화 탭 설정
                this.currentSubTab = pageLink;
                $pages.filter('[data-link="' + pageLink + '"]').show();


                this.renderSubPage();
            }


            // 텝에 연결된 매소드 호출
            , renderSubPage: function (param) {
                var subPageRenderName = this.subPageRenderMap[this.currentSubTab];
                //info 에서 넘어온 파라미터를 전역변수에 현재 창의 전역변후에 넣는다.
                this.settedParam = param;


                (typeof this[subPageRenderName] === 'function') && this[subPageRenderName]();
            }


            // 그리드의 날짜컬럼의 포맷변경 yyyymmdd ==> yyyy-mm-dd
            , setGridDate: function (val) {
                var returnVal = "";


                if (val == null || val.length != 8) {
                    return null;
                }


                returnVal = val.substring(0, 4) + "-" + val.substring(4, 6) + "-" + val.substring(6, 8);


                return returnVal;
            }


            // 그리드의 날짜컬럼의 포맷 변경 yyyy-mm-dd ==> yyyymmdd
            , getGridDate: function (val) {
                var returnVal = "";
                returnVal = val.replace(/-/gi, '');


                return returnVal;
            }


            /* ============================================================== */
            /*  Single 조회         */
            /* ============================================================== */
            , selSingle: function () {
                var that = this;
                var sParam = that.settedParam;


                var linkData = {"header": fn_getHeader("PWF0208401"), "ToDoListInqrySvcGetToDoListIn": sParam};


                //ajax 호출
                bxProxy.post(sUrl, JSON.stringify(linkData), {
                    //	loading 설정
                    enableLoading: true,
                    success: function (responseData) {
                        if (fn_commonChekResult(responseData)) {
                            var taskList = responseData.ToDoListInqrySvcGetToDoListOut.taskList;


                            if (taskList != null || taskList.length > 0) {
                                if (sParam.pgNbr == 1) {
                                    // 조회
                                    that.SingleGrid.setData(taskList);
                                } else {
                                    //다음
                                    var taskLists = that.SingleGrid.getAllData().concat(taskList);
                                    that.SingleGrid.setData(taskLists);
                                }
                            } else {
                                that.SingleGrid.resetData();
                            }


                            if (taskList == null || taskList.length == 0) {
                                if (sParam.pgNbr > 1) {
                                    alertMessage.error(bxMsg('cbb_err_msg.UICME0032'));
                                }
                            }
                        }
                    }
                });
            } // end of 조회


            //그리드 더블클릭시 이벤트 처리
            , selectReocrd: function () {
                var that = this;
                var selectedRecord = that.SingleGrid.grid.getSelectionModel().selected.items[0];
                var param = {};
                var pageHandler = selectedRecord.data.pgHandler;


                if (!selectedRecord || !pageHandler || pageHandler == 'N/A') {
                    return;
                } else {
                    that.$el.trigger({
                        type: 'open-conts-page',
                        pageHandler: pageHandler,
                        pageDPName: bxMsg('cbb_items.SCRN#' + pageHandler),
                        pageInitialize: true,


                        pageRenderInfo: {
                            wflowId: selectedRecord.data.wflowId,
                            wflowInstncId: selectedRecord.data.wflowInstncId,
                            taskKey: selectedRecord.data.taskKey,
                            taskId: selectedRecord.data.taskId,
                            aplctnNbr: selectedRecord.data.aplctnNbr,
                            arrId: selectedRecord.data.arrId
                        }
                    });
                }
            }


            // ToDo 화면에서 자체 완료 처리
            , completeTask: function (param) {
                var that = this;
                var sParam = {};
                var instCd = fn_getInstCd(commonInfo.getInstInfo().instCd);


           	 	if (instCd == null) {
                   alertMessage.info(bxMsg('cbb_items.SCRNITM#instSearchMsg'));
                   return;
           	 	}


                // 입력항목 set
                sParam.instCd = instCd;
                sParam.taskId = param.data.taskId;
                sParam.wflowInstncId = param.data.wflowInstncId;
                sParam.wflowIdKey = param.data.wflowIdKey;
                sParam.aprvlDemandStaffId = $.sessionStorage('staffId');
                sParam.aprvlOpnn = 'N/A';
                sParam.wflowAprvlDscd = '01'; // 승인


                // 헤더 조립
                var linkData = {"header": fn_getHeader("PWF0308101"), "ToDoMgmtSvcExecuteTodoMgmtListIn ": sParam};


                // ajax 호출
                bxProxy.post(sUrl, JSON.stringify(linkData), {
                    success: function (responseData) {
                    	if(fn_commonChekResult(responseData)) {
                    		alertMessage.info(bxMsg('cbb_items.SCRNITM#success'));


                            // 재조회
                            that.selSingle();
                           }
                    }	// end of success: function
                });	// end of bxProxy
            }


            , viewProcessInstanceDetail: function () {
                var that = this;


                var selectedRecord = that.SingleGrid.grid.getSelectionModel().selected.items[0];


                if (selectedRecord.data) {
                    var param = {};
                    param.instCd = selectedRecord.data.instCd;
                    param.wflowId = selectedRecord.data.wflowId;
                    param.wflowInstncId = selectedRecord.data.wflowInstncId,
                    param.wflowNm = selectedRecord.data.wflowNm,
                    param.aprvlAplctnCntnt = selectedRecord.data.aprvlAplctnCntnt,
                    param.wflowPrgrsStsCd = selectedRecord.data.wflowPrgrsStsCd;


                    that.trigger('loadProcessInstanceData', param);
                }
            }


            , reset: function () {
                var that = this;


                that.SingleGrid.resetData();
            }


        }); // end of PWFTabView = Backbone.View.extend


        return PWFTabView;
    }  // end of main function
);
