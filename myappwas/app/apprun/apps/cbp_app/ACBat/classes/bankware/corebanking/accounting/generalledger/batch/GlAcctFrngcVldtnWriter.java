package bankware.corebanking.accounting.generalledger.batch;


import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStream;
import org.springframework.batch.item.ItemStreamException;
import org.springframework.batch.item.ItemStreamWriter;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.context.annotation.Scope;

import bankware.corebanking.accounting.generalledger.daobatch.FrgncBalListBat;
import bankware.corebanking.accounting.generalledger.daobatch.dto.AcFrgncEvltnDBatIO;
import bankware.corebanking.applicationcommon.commondata.interfaces.CmnContext;
import bankware.corebanking.classinfo.annotation.CbbClassInfo;
import bankware.corebanking.context.CbbApplicationContext;
import bankware.corebanking.core.settlement.enums.DpstWhdrwlEnum;
import bxm.common.annotaion.BxmCategory;
import bxm.common.util.Assert;
import bxm.container.annotation.BxmBean;


/**
 * <pre>
 * This bean sample program provides common code management function.
 * It consists of inquiry, register, modify, delete function.
 * </pre>
 *
 * @file   bankware.corebanking.accounting.generalledger.batch.GlAcctFrngcVldtnWriter.java
 * @author Yoonyeong
 * @history
 * <br> 2016. 5. 20. initial
 */
@BxmBean("GlAcctFrngcVldtnWriter")
@Scope("step")
@BxmCategory(logicalName = "GlAcctFrngcVldtnWriter", description = "GlAcctFrngcVldtnWriter")
@CbbClassInfo(classType = { "ITEM_WRITER" })
public class GlAcctFrngcVldtnWriter implements ItemStreamWriter<AcFrgncEvltnDBatIO>, InitializingBean{
	final Logger logger = LoggerFactory.getLogger(this.getClass());
	private FrgncBalListBat frgncBalListBat;
	private CmnContext cmnContext;
	private List<ItemWriter<AcFrgncEvltnDBatIO>> delegates;
	private boolean ignoreItemStream = false;

	private static final int NRML_WRITER = 0;
	@Override
	public void write(List<? extends AcFrgncEvltnDBatIO> item) throws Exception {

		if(logger.isDebugEnabled()){
			logger.debug("==========Processor step3==========");
		}

		List<AcFrgncEvltnDBatIO> nrmList = new ArrayList<AcFrgncEvltnDBatIO>();
		for(AcFrgncEvltnDBatIO acFrgncEvltnDBatIO : item){

			AcFrgncEvltnDBatIO out = new AcFrgncEvltnDBatIO();

			// Generated by code generator [[
			out.setInstCd(acFrgncEvltnDBatIO.getInstCd());// set [기관코드]
			out.setBaseDt(acFrgncEvltnDBatIO.getBaseDt());// set [기준년월일]
			out.setDeptId(acFrgncEvltnDBatIO.getDeptId());// set [부서식별자]
			out.setCrncyCd(acFrgncEvltnDBatIO.getCrncyCd());// set [통화코드]
			out.setAcctgDscd(acFrgncEvltnDBatIO.getAcctgDscd());// set [회계구분코드]
			out.setAcctgItmCd(acFrgncEvltnDBatIO.getAcctgItmCd());// set [계정과목코드]
			out.setEvltnNthNbr(acFrgncEvltnDBatIO.getEvltnNthNbr());// set [계정과목코드]
			out.setAplyBaseExRt(acFrgncEvltnDBatIO.getAplyBaseExRt());// set [적용기준환율]
			out.setGlBal(acFrgncEvltnDBatIO.getGlBal());// set [총계정잔액]
			out.setEvltnBfBal(acFrgncEvltnDBatIO.getEvltnBfBal());// set [평가전잔액]
			out.setEvltnAfBal(acFrgncEvltnDBatIO.getEvltnAfBal());// set [평가후잔액]
			out.setEvltnLossAmt(acFrgncEvltnDBatIO.getEvltnLossAmt());// set [평가손실금액]
			out.setEvltnProfitAmt(acFrgncEvltnDBatIO.getEvltnProfitAmt());// set [평가이익금액]
			out.setLastChngGuid(_getCmnContext().getGuid());
			out.setLastChngTmstmp(_getCmnContext().getTxTimestampToString());
			
			if(acFrgncEvltnDBatIO.getEvltnProfitAmt().compareTo(acFrgncEvltnDBatIO.getEvltnProfitAmt()) > 0) {
				out.setDpstWhdrwlDscd(DpstWhdrwlEnum.DPST.getValue());
			} else {
				out.setDpstWhdrwlDscd(DpstWhdrwlEnum.WHDRWL.getValue());
			}
//			_getFrgncBalListBat().insert(out);
			nrmList.add(out);
		}
		delegates.get(NRML_WRITER).write(nrmList);
	}

	public void setIgnoreItemStream(boolean ignoreItemStream){
		this.ignoreItemStream = ignoreItemStream;
	}

	public void setDelegates(List<ItemWriter<AcFrgncEvltnDBatIO>> delegates){
		this.delegates = delegates;
	}

	@Override
	public void afterPropertiesSet() throws Exception{
		Assert.notNull(delegates, "The 'delegates' may not be null");
		Assert.notEmpty(delegates, "The 'delegates' may not be empty");
	}

	/**
	 * @return the frgncBalListBat
	 */
	private FrgncBalListBat _getFrgncBalListBat() {
		if (frgncBalListBat == null) {
			frgncBalListBat = (FrgncBalListBat) CbbApplicationContext.getBean(FrgncBalListBat.class, frgncBalListBat);
		}
		return frgncBalListBat;
	}
	
	/**
	 * @return the cmnContext
	 */
	private CmnContext _getCmnContext() {
		if (cmnContext == null) {
			cmnContext = (CmnContext) CbbApplicationContext.getBean(CmnContext.class, cmnContext);
		}
		return cmnContext;
	}

	@Override
	public void close() throws ItemStreamException {
		for(ItemWriter<AcFrgncEvltnDBatIO> writer : delegates){
			if(!ignoreItemStream && (writer instanceof ItemStream)){
				((ItemStream)writer).close();
			}
		}
	}

	@Override
	public void open(ExecutionContext executionContext) throws ItemStreamException {
		for(ItemWriter<AcFrgncEvltnDBatIO> writer : delegates){
			if(!ignoreItemStream && (writer instanceof ItemStream)){
				((ItemStream)writer).open(executionContext);
			}
		}		
	}

	@Override
	public void update(ExecutionContext executionContext) throws ItemStreamException {
		for(ItemWriter<AcFrgncEvltnDBatIO> writer : delegates){
			if(!ignoreItemStream && (writer instanceof ItemStream)){
				((ItemStream)writer).update(executionContext);
			}
		}		
	}
}