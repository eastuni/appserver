<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bxm.web.admin.setting.dbio.UserInfoDBIO">
<!--Generated Mon Nov 20 13:18:23 KST 2017-->
<select id="selectUserInfoList" resultType="bxm.web.admin.setting.domain.UserInfoOMM">
SELECT * FROM 
    ( SELECT ROWNUM AS ROW__NUM, A.* FROM 
        (
/* #### Original SQL [[ ################# */
SELECT /* BXM 사용자 */ 
       a.USER_ID AS userId,/*사용자ID*/ 
       a.USER_NM AS userNm,/*사용자명*/ 
       a.ROLE_ID AS roleId,/*역할ID*/ 
       b.ROLE_NM AS roleNm, /*역할 명*/
       a.USE_YN AS useYn,/*사용여부*/ 
       a.USER_IP AS userIp,/*사용자IP*/ 
       a.REG_USER_ID AS regUserId,/*등록 사용자 ID*/ 
       a.REG_OCCUR_DTTM AS regOccurDttm,/*등록 발생 일시*/ 
       a.MODIFY_USER_ID AS modifyUserId,/*변경 사용자 ID*/ 
       a.MODIFY_OCCUR_DTTM AS modifyOccurDttm, /*변경 발생 일시*/
       a.PHONE_NO AS phoneNo,
       a.EMAIL AS email
  FROM BXM_USER_INFO a
  LEFT OUTER JOIN BXM_USER_ROLE b
  ON a.ROLE_ID = b.ROLE_ID AND a.DOMAIN_ID = b.DOMAIN_ID
  WHERE a.DOMAIN_ID = #{searchCondition.domainId}
	  	<if test="searchCondition.userNm != null and searchCondition.userNm !=''">
	  		and upper(a.USER_NM) like upper(#{searchCondition.userNm, jdbcType=VARCHAR})||'%'
	  	</if>
	  	<if test="searchCondition.roleId != null and searchCondition.roleId !=''">
	  		and upper(a.ROLE_ID) like upper(#{searchCondition.roleId, jdbcType=VARCHAR})||'%'
	  	</if>
  ORDER BY a.USER_ID
/* #### Original SQL ]] ################# */
        ) A 
    WHERE ROWNUM &lt;= ((#{pageNum}*#{pageCount})+1) 
    ) 
WHERE ROW__NUM &gt; (#{pageNum}-1)*#{pageCount}
</select>
<select databaseId="mysql" id="selectUserInfoList" resultType="bxm.web.admin.setting.domain.UserInfoOMM">
SELECT /* BXM 사용자 */ 
       a.USER_ID AS userId,/*사용자ID*/ 
       a.USER_NM AS userNm,/*사용자명*/ 
       a.ROLE_ID AS roleId,/*역할ID*/ 
       b.ROLE_NM AS roleNm, /*역할 명*/
       a.USE_YN AS useYn,/*사용여부*/ 
       a.USER_IP AS userIp,/*사용자IP*/ 
       a.REG_USER_ID AS regUserId,/*등록 사용자 ID*/ 
       a.REG_OCCUR_DTTM AS regOccurDttm,/*등록 발생 일시*/ 
       a.MODIFY_USER_ID AS modifyUserId,/*변경 사용자 ID*/ 
       a.MODIFY_OCCUR_DTTM AS modifyOccurDttm, /*변경 발생 일시*/
       a.PHONE_NO AS phoneNo,
       a.EMAIL AS email
  FROM BXM_USER_INFO a
  LEFT OUTER JOIN BXM_USER_ROLE b
  ON a.ROLE_ID = b.ROLE_ID AND a.DOMAIN_ID = b.DOMAIN_ID
  WHERE a.DOMAIN_ID = #{searchCondition.domainId}
	  	<if test="searchCondition.userNm != null and searchCondition.userNm !=''">
	  		and upper(a.USER_NM) like concat(upper(#{searchCondition.userNm}),'%')
	  	</if>
	  	<if test="searchCondition.roleId != null and searchCondition.roleId !=''">
	  		and upper(a.ROLE_ID) like concat(upper(#{searchCondition.roleId}),'%')
	  	</if>
  ORDER BY a.USER_ID
  LIMIT #{pageNum}, #{pageCount}
</select>
<select id="selectUserInfo" parameterType="bxm.web.admin.setting.domain.UserInfoOMM" resultType="bxm.web.admin.setting.domain.UserInfoOMM">
SELECT /* BXM 사용자 */ 
       a.USER_ID AS userId,/*사용자ID*/ 
       a.USER_NM AS userNm,/*사용자명*/ 
       a.USER_PWD AS userPwd,/*사용자비밀번호*/ 
       a.ROLE_ID AS roleId,/*역할ID*/ 
       b.ROLE_NM AS roleNm,/*역할 명*/ 
       a.USE_YN AS useYn,/*사용여부*/ 
       a.USER_IP AS userIp,/*사용자IP*/ 
       a.USER_IP_VALID_YN AS userIpValidYn,/*사용자IP검증여부*/ 
       a.REG_USER_ID AS regUserId,/*등록 사용자 ID*/ 
       a.REG_OCCUR_DTTM AS regOccurDttm,/*등록 발생 일시*/ 
       a.MODIFY_USER_ID AS modifyUserId,/*변경 사용자 ID*/ 
       a.MODIFY_OCCUR_DTTM AS modifyOccurDttm,/*변경 발생 일시*/ 
       a.PHONE_NO AS phoneNo,
       a.EMAIL AS email
  FROM BXM_USER_INFO a
       LEFT OUTER JOIN BXM_USER_ROLE b 
       ON a.ROLE_ID = b.ROLE_ID AND a.DOMAIN_ID = b.DOMAIN_ID
 WHERE a.USER_ID = #{userId}  AND a.DOMAIN_ID = #{domainId}
</select>
<insert id="insertUserInfo" parameterType="bxm.web.admin.setting.domain.UserInfoOMM">
INSERT INTO BXM_USER_INFO /* BXM 사용자 */
(
	DOMAIN_ID, /* 도메인 ID */
    USER_ID /*사용자ID*/,
    USER_NM /*사용자명*/,
    USER_PWD /*사용자비밀번호*/,
    ROLE_ID /*역할ID*/,
    USE_YN /*사용여부*/,
    USER_IP /*사용자IP*/,
    USER_IP_VALID_YN /*사용자IP검증여부*/,
    REG_USER_ID /*등록 사용자 ID*/,
    REG_OCCUR_DTTM /*등록 발생 일시*/,
    MODIFY_USER_ID /*변경 사용자 ID*/,
    MODIFY_OCCUR_DTTM /*변경 발생 일시*/ ,
    PHONE_NO,
    EMAIL
)
VALUES
(
	#{domainId}, /* 도메인 ID*/
    #{userId, jdbcType=VARCHAR} /*사용자ID*/,
    #{userNm, jdbcType=VARCHAR} /*사용자명*/,
    #{userPwd, jdbcType=VARCHAR} /*사용자비밀번호*/,
    #{roleId, jdbcType=VARCHAR} /*역할ID*/,
    #{useYn, jdbcType=VARCHAR} /*사용여부*/,
    #{userIp, jdbcType=VARCHAR} /*사용자IP*/,
    #{userIpValidYn, jdbcType=VARCHAR} /*사용자IP검증여부*/,
    #{regUserId, jdbcType=VARCHAR} /*등록 사용자 ID*/,
    #{regOccurDttm, jdbcType=VARCHAR} /*등록 발생 일시*/,
    #{modifyUserId, jdbcType=VARCHAR} /*변경 사용자 ID*/,
    #{modifyOccurDttm, jdbcType=VARCHAR} /*변경 발생 일시*/ ,
    #{phoneNo, jdbcType=VARCHAR},
    #{email, jdbcType=VARCHAR}
)
</insert>
<delete id="deleteUserInfo" parameterType="bxm.web.admin.setting.domain.UserInfoPwdOMM">
DELETE FROM BXM_USER_INFO /* BXM 사용자 */
      WHERE USER_ID = #{userId}
      AND DOMAIN_ID = #{domainId}
</delete>
<update id="updateUserInfo" parameterType="bxm.web.admin.setting.domain.UserInfoOMM">
UPDATE BXM_USER_INFO /* BXM 사용자 */
   SET USER_NM = #{userNm, jdbcType=VARCHAR} /* 사용자명 */,
       USER_PWD = #{userPwd, jdbcType=VARCHAR} /* 사용자비밀번호 */,
       ROLE_ID = #{roleId, jdbcType=VARCHAR} /* 역할ID */,
       USE_YN = #{useYn, jdbcType=VARCHAR} /* 사용여부 */,
       USER_IP = #{userIp, jdbcType=VARCHAR} /* 사용자IP */,
       MODIFY_USER_ID = #{modifyUserId, jdbcType=VARCHAR} /* 변경 사용자 ID */,
       MODIFY_OCCUR_DTTM = #{modifyOccurDttm, jdbcType=VARCHAR} /* 변경 발생 일시 */,
       PHONE_NO = #{phoneNo, jdbcType=VARCHAR},
       EMAIL = #{email, jdbcType=VARCHAR}
 WHERE USER_ID = #{userId}
 AND DOMAIN_ID = #{domainId}
</update>
<select id="selectUserRoleIdList" resultType="bxm.web.admin.setting.domain.UserRoleOMM">
SELECT /* BXM 역할 */ 
       ROLE_ID AS roleId,/*역할ID*/ 
       ROLE_NM AS roleNm/*역할명*/ 
  FROM BXM_USER_ROLE
  WHERE DOMAIN_ID = #{domainId}
</select>
<select id="countTotalPage" resultType="java.lang.Integer">
SELECT COUNT(*)
  FROM BXM_USER_INFO a
  LEFT OUTER JOIN BXM_USER_ROLE b
  ON a.ROLE_ID = b.ROLE_ID AND a.DOMAIN_ID = b.DOMAIN_ID
  WHERE a.DOMAIN_ID = #{domainId}
	  	<if test="userInfo.userNm != null and userInfo.userNm !=''">
	  		and upper(a.USER_NM) like upper(#{userInfo.userNm})||'%'
	  	</if>
	  	<if test="userInfo.roleId != null and userInfo.roleId !=''">
	  		and upper(a.ROLE_ID) like upper(#{userInfo.roleId})||'%'
	  	</if>
  ORDER BY a.USER_ID
</select>
<select databaseId="mysql" id="countTotalPage" resultType="java.lang.Integer">
SELECT COUNT(*)
  FROM BXM_USER_INFO a
  LEFT OUTER JOIN BXM_USER_ROLE b
  ON a.ROLE_ID = b.ROLE_ID AND a.DOMAIN_ID = b.DOMAIN_ID
  WHERE a.DOMAIN_ID = #{domainId}
	  	<if test="userInfo.userNm != null and userInfo.userNm !=''">
	  		and upper(a.USER_NM) like concat(upper(#{userInfo.userNm}),'%')
	  	</if>
	  	<if test="userInfo.roleId != null and userInfo.roleId !=''">
	  		and upper(a.ROLE_ID) like concat(upper(#{userInfo.roleId}),'%')
	  	</if>
  ORDER BY a.USER_ID
</select>
<select id="selectUserAll" resultType="bxm.web.admin.setting.domain.UserInfoExcelOMM">
SELECT /* BXM 사용자 */ 
       USER_ID AS userId,/*사용자ID*/ 
       USER_NM AS userNm,/*사용자명*/ 
       USER_PWD AS userPwd,/*사용자비밀번호*/ 
       ROLE_ID AS roleId,/*역할ID*/ 
       USE_YN AS useYn,/*사용여부*/ 
       USER_IP AS userIp,/*사용자IP*/ 
       USER_IP_VALID_YN AS userIpValidYn,/*사용자IP검증여부*/ 
       REG_USER_ID AS regUserId,/*등록 사용자 ID*/ 
       REG_OCCUR_DTTM AS regOccurDttm,/*등록 발생 일시*/ 
       MODIFY_USER_ID AS modifyUserId,/*변경 사용자 ID*/ 
       MODIFY_OCCUR_DTTM AS modifyOccurDttm, /*변경 발생 일시*/
       PHONE_NO AS phoneNo,
       EMAIL AS email
  FROM BXM_USER_INFO
  WHERE DOMAIN_ID = #{domainID}
  ORDER BY USER_ID ASC
</select>
<update id="mergeUserInfo" parameterType="bxm.web.admin.setting.domain.UserInfoExcelOMM">
/* Excel Import 용. deprecated */

MERGE  INTO BXM_USER_INFO /*BXM 사용자*/
            USING dual
ON          ( USER_ID = #{userId, jdbcType=VARCHAR} )
WHEN MATCHED THEN 
     UPDATE 
        SET USER_NM = #{userNm, jdbcType=VARCHAR} /* 사용자명 */,
            USER_PWD = #{userPwd, jdbcType=VARCHAR} /* 사용자비밀번호 */,
            ROLE_ID = #{roleId, jdbcType=VARCHAR} /* 역할ID */,
            USE_YN = #{useYn, jdbcType=VARCHAR} /* 사용여부 */,
            USER_IP = #{userIp, jdbcType=VARCHAR} /* 사용자IP */,
            USER_IP_VALID_YN = #{userIpValidYn, jdbcType=VARCHAR} /* 사용자IP검증여부 */,
            REG_USER_ID = #{regUserId, jdbcType=VARCHAR} /* 등록 사용자 ID */,
            REG_OCCUR_DTTM = #{regOccurDttm, jdbcType=VARCHAR} /* 등록 발생 일시 */,
            MODIFY_USER_ID = #{modifyUserId, jdbcType=VARCHAR} /* 변경 사용자 ID */,
            MODIFY_OCCUR_DTTM = #{modifyOccurDttm, jdbcType=VARCHAR} /* 변경 발생 일시 */,
            PHONE_NO = #{phoneNo, jdbcType=VARCHAR} /* 폰번호 */,
            EMAIL = #{email, jdbcType=VARCHAR} /* 이메일 */
WHEN NOT MATCHED THEN 
     INSERT
     (
         USER_ID /*사용자ID*/,
         USER_NM /*사용자명*/,
         USER_PWD /*사용자비밀번호*/,
         ROLE_ID /*역할ID*/,
         USE_YN /*사용여부*/,
         USER_IP /*사용자IP*/,
         USER_IP_VALID_YN /*사용자IP검증여부*/,
         REG_USER_ID /*등록 사용자 ID*/,
         REG_OCCUR_DTTM /*등록 발생 일시*/,
         MODIFY_USER_ID /*변경 사용자 ID*/,
         MODIFY_OCCUR_DTTM /*변경 발생 일시*/,
         PHONE_NO /*폰번호*/,
         EMAIL /*이메일*/ 
     ) 
     VALUES 
     (
          #{userId, jdbcType=VARCHAR} /*사용자ID*/,
         #{userNm, jdbcType=VARCHAR} /*사용자명*/,
         #{userPwd, jdbcType=VARCHAR} /*사용자비밀번호*/,
         #{roleId, jdbcType=VARCHAR} /*역할ID*/,
         #{useYn, jdbcType=VARCHAR} /*사용여부*/,
         #{userIp, jdbcType=VARCHAR} /*사용자IP*/,
         #{userIpValidYn, jdbcType=VARCHAR} /*사용자IP검증여부*/,
         #{regUserId, jdbcType=VARCHAR} /*등록 사용자 ID*/,
         #{regOccurDttm, jdbcType=VARCHAR} /*등록 발생 일시*/,
         #{modifyUserId, jdbcType=VARCHAR} /*변경 사용자 ID*/,
         #{modifyOccurDttm, jdbcType=VARCHAR} /*변경 발생 일시*/,
         #{phoneNo, jdbcType=VARCHAR} /*폰번호*/,
         #{email, jdbcType=VARCHAR} /*이메일*/ 
     )
</update>
</mapper>
